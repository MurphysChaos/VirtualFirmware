diff --git a/hw/e1000.c b/hw/e1000.c
index fe3e812..bc1ac61 100644
--- a/hw/e1000.c
+++ b/hw/e1000.c
@@ -24,7 +24,7 @@
  * License along with this library; if not, see <http://www.gnu.org/licenses/>.
  */
 
-
+#include <stdio.h>
 #include "hw.h"
 #include "pci.h"
 #include "net.h"
@@ -36,6 +36,8 @@
 
 #define E1000_DEBUG
 
+FILE *e1000_log = NULL;
+
 #ifdef E1000_DEBUG
 enum {
     DEBUG_GENERAL,	DEBUG_IO,	DEBUG_MMIO,	DEBUG_INTERRUPT,
@@ -137,7 +139,8 @@ enum {
     defreg(TORH),	defreg(TORL),	defreg(TOTH),	defreg(TOTL),
     defreg(TPR),	defreg(TPT),	defreg(TXDCTL),	defreg(WUFC),
     defreg(RA),		defreg(MTA),	defreg(CRCERRS),defreg(VFTA),
-    defreg(VET),
+    defreg(VET),	defreg(PF_ATQLEN), defreg(PF_ATQT),
+    defreg(PF_ATQH),	defreg(PF_ATQBAH), defreg(PF_ATQBAL),
 };
 
 enum { PHY_R = 1, PHY_W = 2, PHY_RW = PHY_R | PHY_W };
@@ -306,6 +309,55 @@ flash_eerd_read(E1000State *s, int x)
            E1000_EEPROM_RW_REG_DONE | r);
 }
 
+static void e1000_aq_get_version(struct e1000_aq_desc *desc)
+{
+	fprintf(e1000_log, "in aq_get_version!\n");
+#define FW_MAJ_TEMP 0x34
+#define FW_MIN_TEMP 0x13
+#define API_MAJ_TEMP 0xfa
+#define API_MIN_TEMP 0xaf
+	desc->param0 = (FW_MAJ_TEMP);
+	desc->param0 |= ((FW_MIN_TEMP << 16));
+	desc->param1 = (API_MAJ_TEMP);
+	desc->param1 |= ((API_MIN_TEMP << 16));
+}
+
+static void e1000_set_atq_tail(E1000State *s, int index, uint32_t val)
+{
+	target_phys_addr_t base;
+	struct e1000_aq_desc desc;
+	uint16_t ring_len;
+
+	/* save the new tail value */
+	s->mac_reg[index] = val;
+
+	/* this write triggers action */
+	base = ((uint64_t)s->mac_reg[PF_ATQBAH] << 32) +
+	        s->mac_reg[PF_ATQBAL] + sizeof(struct e1000_aq_desc) *
+	        s->mac_reg[PF_ATQH];
+
+	cpu_physical_memory_read(base, (void *)&desc, sizeof(desc));
+
+	// process
+	switch (desc.opcode) {
+	case e1000_aqc_get_version:
+		e1000_aq_get_version(&desc);
+		break;
+	default:
+		desc.retval = E1000_AQ_RC_ENOSYS;
+		break;
+	}
+
+fprintf(e1000_log, "param0: %x\n", desc.param0);
+	// writeback descriptor
+	desc.flags |= E1000_AQ_FLAG_DD;
+	cpu_physical_memory_write(base, (void *)&desc, sizeof(desc));
+
+	ring_len = s->mac_reg[PF_ATQLEN] & ~E1000_PF_ATQLEN_ATQENABLE_MASK;
+	if (++s->mac_reg[PF_ATQH] >= ring_len)
+		s->mac_reg[PF_ATQH] = 0;
+}
+
 static void
 putsum(uint8_t *data, uint32_t n, uint32_t sloc, uint32_t css, uint32_t cse)
 {
@@ -885,6 +937,12 @@ static uint32_t (*macreg_readops[])(E1000State *, int) = {
     [RA ... RA+31] = &mac_readreg,
     [MTA ... MTA+127] = &mac_readreg,
     [VFTA ... VFTA+127] = &mac_readreg,
+    [PF_ATQBAH] = &mac_readreg,
+    [PF_ATQBAL] = &mac_readreg,
+    [PF_ATQLEN] = &mac_readreg,
+    [PF_ATQH] = &mac_readreg,
+    [PF_ATQT] = &mac_readreg,
+
 };
 enum { NREADOPS = ARRAY_SIZE(macreg_readops) };
 
@@ -901,6 +959,11 @@ static void (*macreg_writeops[])(E1000State *, int, uint32_t) = {
     [RA ... RA+31] = &mac_writereg,
     [MTA ... MTA+127] = &mac_writereg,
     [VFTA ... VFTA+127] = &mac_writereg,
+    [PF_ATQBAH] = &mac_writereg,
+    [PF_ATQBAL] = &mac_writereg,
+    [PF_ATQLEN] = &mac_writereg,
+    [PF_ATQH] = &mac_writereg,
+    [PF_ATQT] = &e1000_set_atq_tail,
 };
 enum { NWRITEOPS = ARRAY_SIZE(macreg_writeops) };
 
@@ -1127,6 +1190,8 @@ static int
 pci_e1000_uninit(PCIDevice *dev)
 {
     E1000State *d = DO_UPCAST(E1000State, dev, dev);
+    fprintf(e1000_log, "Logging ended.\n");
+    fclose(e1000_log);
 
     cpu_unregister_io_memory(d->mmio_index);
     qemu_del_vlan_client(&d->nic->nc);
@@ -1162,6 +1227,14 @@ static int pci_e1000_init(PCIDevice *pci_dev)
     int i;
     uint8_t *macaddr;
 
+    if (e1000_log == NULL) {
+	    e1000_log = fopen("/tmp/e1000_qemu.log", "a");
+	    setvbuf(e1000_log, NULL, _IONBF, 0);
+	    fprintf(e1000_log, "Logging started.\n");
+    } else {
+	    fprintf(e1000_log, "Logging re-started.\n");
+    }
+
     pci_conf = d->dev.config;
 
     pci_config_set_vendor_id(pci_conf, PCI_VENDOR_ID_INTEL);
diff --git a/hw/e1000_hw.h b/hw/e1000_hw.h
index 9bd8a4b..b10af62 100644
--- a/hw/e1000_hw.h
+++ b/hw/e1000_hw.h
@@ -723,6 +723,53 @@ struct e1000_tx_desc {
 #define E1000_TCTL_NRTU   0x02000000    /* No Re-transmit on underrun */
 #define E1000_TCTL_MULR   0x10000000    /* Multiple request support */
 
+/* Admin Queue registers */
+#define E1000_PF_ATQBAH             	0x00006000
+#define E1000_PF_ATQBAH_ATQBAH_SHIFT	0
+#define E1000_PF_ATQBAH_ATQBAH_MASK 	(0xFFFFFFFF << E1000_PF_ATQBAH_ATQBAH_SHIFT)
+#define E1000_PF_ATQBAL             	0x00006004
+#define E1000_PF_ATQBAL_ATQBAL_SHIFT	0
+#define E1000_PF_ATQBAL_ATQBAL_MASK 	(0xFFFFFFFF << E1000_PF_ATQBAL_ATQBAL_SHIFT)
+#define E1000_PF_ATQH           	0x00006008
+#define E1000_PF_ATQH_ATQH_SHIFT	0
+#define E1000_PF_ATQH_ATQH_MASK 	(0x3FF << E1000_PF_ATQH_ATQH_SHIFT)
+#define E1000_PF_ATQLEN                	0x0000600C
+#define E1000_PF_ATQLEN_ATQLEN_SHIFT   	0
+#define E1000_PF_ATQLEN_ATQLEN_MASK    	(0x3FF << E1000_PF_ATQLEN_ATQLEN_SHIFT)
+#define E1000_PF_ATQLEN_ATQENABLE_SHIFT	31
+#define E1000_PF_ATQLEN_ATQENABLE_MASK 	(0x1 << E1000_PF_ATQLEN_ATQENABLE_SHIFT)
+#define E1000_PF_ATQT           	0x00006010
+#define E1000_PF_ATQT_ATQT_SHIFT	0
+#define E1000_PF_ATQT_ATQT_MASK 	(0x3FF << E1000_PF_ATQT_ATQT_SHIFT)
+
+
+enum e1000_admin_queue_cmd {
+	e1000_aqc_get_version	= 0x0001,
+};
+
+/*
+ * Basic adminq descriptor
+ */
+struct e1000_aq_desc {
+        uint16_t flags;
+        uint16_t opcode;
+        uint16_t datalen;
+        uint16_t retval;
+        uint32_t cookie_high;
+        uint32_t cookie_low;
+        uint32_t param0;
+        uint32_t param1;
+        uint32_t addr_high;
+        uint32_t addr_low;
+};
+
+#define E1000_AQ_FLAG_DD	(1 << 0)
+
+enum e1000_admin_queue_err {
+	E1000_AQ_RC_OK		= 0,
+	E1000_AQ_RC_ENOSYS	= 1,
+};
+
 /* Receive Descriptor */
 struct e1000_rx_desc {
     uint64_t buffer_addr; /* Address of the descriptor's data buffer */
